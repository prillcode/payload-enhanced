/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    accommodations: Accommodation;
    activities: Activity;
    media: Media;
    pages: Page;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    accommodations: AccommodationsSelect<false> | AccommodationsSelect<true>;
    activities: ActivitiesSelect<false> | ActivitiesSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    'site-settings': SiteSetting;
  };
  globalsSelect: {
    'site-settings': SiteSettingsSelect<false> | SiteSettingsSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  name?: string | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "accommodations".
 */
export interface Accommodation {
  id: number;
  name: string;
  slug: string;
  rentalType: 'cabin' | 'house' | 'apartment' | 'duplex' | 'condo' | 'villa' | 'room';
  /**
   * Brief description shown in accommodation lists and cards
   */
  shortDescription?: string | null;
  /**
   * Optional rich content that will appear below the short description on the accommodation detail page
   */
  pageContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  pricePerNight: number;
  maxGuests: number;
  bedrooms?: number | null;
  bathrooms?: number | null;
  amenities?:
    | {
        amenity?: string | null;
        id?: string | null;
      }[]
    | null;
  images?:
    | {
        image?: (number | null) | Media;
        id?: string | null;
      }[]
    | null;
  location?: {
    address?: string | null;
    city?: string | null;
    state?: string | null;
    zipCode?: string | null;
  };
  available?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    card?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    hero?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "activities".
 */
export interface Activity {
  id: number;
  name: string;
  slug: string;
  activityType:
    | 'hiking'
    | 'kayaking'
    | 'fishing'
    | 'cycling'
    | 'wildlife-tour'
    | 'climbing'
    | 'camping'
    | 'photography'
    | 'other';
  /**
   * Brief description shown in activity lists and cards
   */
  shortDescription?: string | null;
  /**
   * Optional rich content that will appear below the short description on the activity detail page
   */
  pageContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  duration?: string | null;
  difficulty?: ('easy' | 'moderate' | 'challenging' | 'expert') | null;
  pricePerPerson?: number | null;
  minAge?: number | null;
  maxParticipants?: number | null;
  images?:
    | {
        image?: (number | null) | Media;
        id?: string | null;
      }[]
    | null;
  location?: {
    name?: string | null;
    address?: string | null;
    city?: string | null;
    state?: string | null;
    zipCode?: string | null;
  };
  season?: ('year-round' | 'spring' | 'summer' | 'fall' | 'winter') | null;
  available?: boolean | null;
  featuredActivity?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  title: string;
  /**
   * URL-friendly version of the title (e.g., "about", "contact")
   */
  slug: string;
  hero: {
    title: string;
    description?: string | null;
    backgroundImage?: (number | null) | Media;
    gradient?:
      | ('from-forest-600 to-forest-800' | 'from-earth-400 to-earth-700' | 'from-sunset-500 to-sunset-700' | 'custom')
      | null;
  };
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  sections?:
    | {
        sectionTitle: string;
        sectionContent?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        layout?: ('full' | 'two-column' | 'centered') | null;
        backgroundColor?: ('bg-white' | 'bg-earth-50' | 'bg-forest-50') | null;
        id?: string | null;
      }[]
    | null;
  seo?: {
    metaTitle?: string | null;
    metaDescription?: string | null;
    /**
     * Comma-separated keywords
     */
    keywords?: string | null;
  };
  status?: ('draft' | 'published') | null;
  showInNavigation?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'accommodations';
        value: number | Accommodation;
      } | null)
    | ({
        relationTo: 'activities';
        value: number | Activity;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "accommodations_select".
 */
export interface AccommodationsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  rentalType?: T;
  shortDescription?: T;
  pageContent?: T;
  pricePerNight?: T;
  maxGuests?: T;
  bedrooms?: T;
  bathrooms?: T;
  amenities?:
    | T
    | {
        amenity?: T;
        id?: T;
      };
  images?:
    | T
    | {
        image?: T;
        id?: T;
      };
  location?:
    | T
    | {
        address?: T;
        city?: T;
        state?: T;
        zipCode?: T;
      };
  available?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "activities_select".
 */
export interface ActivitiesSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  activityType?: T;
  shortDescription?: T;
  pageContent?: T;
  duration?: T;
  difficulty?: T;
  pricePerPerson?: T;
  minAge?: T;
  maxParticipants?: T;
  images?:
    | T
    | {
        image?: T;
        id?: T;
      };
  location?:
    | T
    | {
        name?: T;
        address?: T;
        city?: T;
        state?: T;
        zipCode?: T;
      };
  season?: T;
  available?: T;
  featuredActivity?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        card?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        hero?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  hero?:
    | T
    | {
        title?: T;
        description?: T;
        backgroundImage?: T;
        gradient?: T;
      };
  content?: T;
  sections?:
    | T
    | {
        sectionTitle?: T;
        sectionContent?: T;
        layout?: T;
        backgroundColor?: T;
        id?: T;
      };
  seo?:
    | T
    | {
        metaTitle?: T;
        metaDescription?: T;
        keywords?: T;
      };
  status?: T;
  showInNavigation?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "site-settings".
 */
export interface SiteSetting {
  id: number;
  siteTitle: string;
  siteDescription: string;
  showSiteDescriptionInHeader?: boolean | null;
  siteLogo?: (number | null) | Media;
  hideSiteTitleIfLogo?: boolean | null;
  /**
   * Hex code or CSS color for branding (e.g., #1a202c)
   */
  primaryColor?: string | null;
  homeHeroTitle: string;
  homeHeroDescription?: string | null;
  homeHeroIntroText?: string | null;
  homePageSlider?: {
    slides?:
      | {
          image: number | Media;
          caption?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  homeActivitiesSection: {
    /**
     * Toggle to show or hide this section on the homepage
     */
    displaySection?: boolean | null;
    title: string;
    description?: string | null;
    numberOfItems: number;
  };
  homeAccommodationsSection: {
    /**
     * Toggle to show or hide this section on the homepage
     */
    displaySection?: boolean | null;
    title: string;
    description?: string | null;
    numberOfItems: number;
  };
  homeCallToActionSection: {
    /**
     * Toggle to show or hide this section on the homepage
     */
    displaySection?: boolean | null;
    title: string;
    description?: string | null;
    buttonText: string;
    buttonLink: string;
  };
  contactEmail?: string | null;
  socialLinks?:
    | {
        platform: string;
        url: string;
        id?: string | null;
      }[]
    | null;
  footerText?: string | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "site-settings_select".
 */
export interface SiteSettingsSelect<T extends boolean = true> {
  siteTitle?: T;
  siteDescription?: T;
  showSiteDescriptionInHeader?: T;
  siteLogo?: T;
  hideSiteTitleIfLogo?: T;
  primaryColor?: T;
  homeHeroTitle?: T;
  homeHeroDescription?: T;
  homeHeroIntroText?: T;
  homePageSlider?:
    | T
    | {
        slides?:
          | T
          | {
              image?: T;
              caption?: T;
              id?: T;
            };
      };
  homeActivitiesSection?:
    | T
    | {
        displaySection?: T;
        title?: T;
        description?: T;
        numberOfItems?: T;
      };
  homeAccommodationsSection?:
    | T
    | {
        displaySection?: T;
        title?: T;
        description?: T;
        numberOfItems?: T;
      };
  homeCallToActionSection?:
    | T
    | {
        displaySection?: T;
        title?: T;
        description?: T;
        buttonText?: T;
        buttonLink?: T;
      };
  contactEmail?: T;
  socialLinks?:
    | T
    | {
        platform?: T;
        url?: T;
        id?: T;
      };
  footerText?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}